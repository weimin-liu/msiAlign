name: Build

on:
  workflow_dispatch:

jobs:
  createrelease:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Tag and Release Name to UTC Timestamp
        id: timestamp
        run: |
          TIMESTAMP="v$(date -u +'%Y%m%d%H%M%S')"
          echo "tag=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "release_name=$TIMESTAMP" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.AC_TOKEN }}
        with:
          tag_name: ${{ steps.timestamp.outputs.tag }}
          release_name: Release ${{ steps.timestamp.outputs.release_name }}
          draft: false
          prerelease: false

      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt

      - name: Verify Release URL File Exists
        run: ls -l release_url.txt  # Debugging step to confirm file existence

      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v3
        with:
          name: release_url
          path: release_url.txt

  build:
    name: Build packages
    needs: createrelease
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            TARGET: windows
            CMD_BUILD: >
              pip install setuptools --upgrade &&
              pip install wheel &&
              pip uninstall pyinstaller -y &&
              git clone https://github.com/pyinstaller/pyinstaller &&
              cd pyinstaller\bootloader &&
              python ./waf all distclean all --target-arch=64bit &&
              cd .. &&
              pip install . &&
              cd .. &&
              pyinstaller --noconsole -w -n msiAlign msiAlign.py &&
              cd dist &&
              powershell -Command "Compress-Archive -Path 'msiAlign\\*' -DestinationPath 'msialign_win.zip'"
            OUT_FILE_NAME: msialign_win.zip
            ASSET_MIME: application/zip

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.12
        uses: actions/setup-python@v2
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build with pyinstaller for ${{ matrix.TARGET }}
        run: ${{ matrix.CMD_BUILD }}

      - name: Install Inno Setup
        if: matrix.os == 'windows-latest'
        run: choco install innosetup

      - name: Create Inno Setup Script
        if: matrix.os == 'windows-latest'
        run: |
          echo [Setup] > setup.iss
          echo AppName=msiAlign >> setup.iss
          echo AppVersion=1.0 >> setup.iss
          echo DefaultDirName={pf}\msiAlign >> setup.iss
          echo DefaultGroupName=msiAlign >> setup.iss
          echo OutputDir=dist >> setup.iss
          echo OutputBaseFilename=msiAlignInstaller >> setup.iss
          echo [Files] >> setup.iss
          echo Source: "dist\msiAlign\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs >> setup.iss
          echo [Icons] >> setup.iss
          echo Name: "{group}\msiAlign"; Filename: "{app}\msiAlign.exe" >> setup.iss

      - name: Run Inno Setup
        if: matrix.os == 'windows-latest'
        run: iscc setup.iss

      - name: Load Release URL File from release job
        uses: actions/download-artifact@v3
        with:
          name: release_url
          path: ./  # Ensure file downloads to the root directory

      - name: Verify Release URL File Downloaded
        run: ls -l release_url.txt  # Debugging step to confirm download

      - name: Get Release File Name & Upload URL
        id: get_release_info
        shell: bash
        run: |
          value=$(cat release_url.txt)
          echo "upload_url=$value" >> $GITHUB_OUTPUT

      - name: Upload Release Asset
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.AC_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./dist/msiAlignInstaller.exe
          asset_name: msiAlignInstaller.exe
          asset_content_type: application/vnd.microsoft.portable-executable